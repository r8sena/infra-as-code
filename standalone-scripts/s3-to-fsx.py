#!/usr/bin/python3

"""
Created on Fri May 13 12:59:22 2022
Changed on Fri Oct 07 12:38:00 2022

@author: r8sena@gmail.com
"""

from operator import contains
import os
import sys
import time
import boto3
import botocore
import datetime
from decouple import Config, RepositoryEnv

""" parameters:
    - prefix: pattern to match in s3 bucket which depends on how object files are saved into bucket
    - mount_point: local path to folder where finding files for processing
    - bucket: s3 bucket with target contents
    - s3_client: initialized s3 client object
    - log_file: local path and filename to daily logs
    - shared_folder: a FSx shared folder endpoint
"""

def fsx(shared_folder, mount_point, mount_options):
    print("{} - Trying to map share {} on mount point {}.".format(datetime.datetime.today(), shared_folder, mount_point))
    if os.path.exists(mount_point):
        mount_cmd = "sudo mount -t cifs {} {} -o {}".format(shared_folder, mount_point, mount_options)
        os.system(mount_cmd)
        sys.exit()
    else:
        print("{} - Mount point {} not found.".format(datetime.datetime.today(), mount_point))

# check if file is being generated yet
def check_err(shared_folder, mount_point, mount_options, base_dir):
    if os.path.exists(os.path.join(mount_point) + base_dir):
       for root, dirs, files in os.walk(os.path.join(mount_point) + base_dir):
           for f in files:
               file = str.lower(f)
               if file.endswith(".err"):
                   print("{} - There is an ERR file on {}/".format(datetime.datetime.today(), os.path.join(mount_point) + base_dir))
                   print("{} - So the TXT file is being generated by the system yet.".format(datetime.datetime.today()))
                   sys.exit(file)
               else:
                   print("{} - There is not an ERR file on {}/.".format(datetime.datetime.today(), os.path.join(mount_point) + base_dir))           
    else:
        print("{} - Directory {} not found.".format(datetime.datetime.today(), os.path.join(mount_point) + base_dir))
        fsx(shared_folder, mount_point, mount_options)

# copy files from /PLATFORM/BILLING/FILES/PARTNER and send them to s3 bucket A
def send(shared_folder, mount_point, mount_options, base_dir, bucket, bucket_folder, backup_folder, s3_client, output):
    if os.path.exists(os.path.join(mount_point) + base_dir):
       for root, dirs, files in os.walk(os.path.join(mount_point) + base_dir):
          for f in files:
             if f.endswith(".txt"):
                file_name = os.path.join(root, f)
                object_name = bucket_folder + f
                check_lock = "file {} > {}".format(file_name, output)
                os.system(check_lock)
                time.sleep(10)
                try:
                    with open(output, 'r') as file:
                        line = file.readlines()[0]
                        print("{} - File attributes of {}".format(datetime.datetime.today(), line))
                        attribute = str(line.split(",")[-1])
                        if "no read permission" in attribute:
                            print("{} - File {} has been locked for another process in Windows App Server. Try again later.".format(datetime.datetime.today(), file_name))
                        else:
                            print("{} - Start transfering file {} to bucket S3 {}".format(datetime.datetime.today(), file_name, bucket))
                            try:
                                s3_client.upload_file(file_name, bucket, object_name)
                                print("{} - Uploaded {} to s3://{}/{}".format(datetime.datetime.today(), file_name, bucket, object_name))
                                dest_file_path = backup_folder + f
                                print("{} - Moving {} to {}".format(datetime.datetime.today(), file_name, dest_file_path))
                                os.replace(file_name, dest_file_path)
                            except botocore.exceptions.ClientError as error:
                                raise error
                            except botocore.exceptions.ParamValidationError as error:
                                raise ValueError('The parameters you provided are incorrect: {}'.format(error))
                except FileNotFoundError as file_not_found:
                    print("{} - {}".format(datetime.datetime.today(), file_not_found))
                    print("{} - File {} not found.".format(datetime.datetime.today(), output))
                except PermissionError as permission:
                    print("{} - {}".format(datetime.datetime.today(), permission))
             else:
                 print("{} - {} is not a TXT file...skipping it.".format(datetime.datetime.today(), f))
    else:
        print("{} - Directory {} not found.".format(datetime.datetime.today(), os.path.join(mount_point) + base_dir))
        fsx(shared_folder, mount_point, mount_options)

# copy files from /PLATFORM/BILLING/FILES/PARTNER and send them to s3 bucket B
def send_partnerB(shared_folder, mount_point, mount_options, base_dir, bucketB, bucket_folder_partnerB, backup_folder, s3_client, output):
    if os.path.exists(os.path.join(mount_point) + base_dir):
       for root, dirs, files in os.walk(os.path.join(mount_point) + base_dir):
          for f in files:
             if f.endswith(".txt"):
                file_name = os.path.join(root, f)
                object_name = bucket_folder_partnerB + f
                check_lock = "file {} > {}".format(file_name, output)
                os.system(check_lock)
                time.sleep(10)
                try:
                    with open(output, 'r') as file:
                        line = file.readlines()[0]
                        print("{} - File attributes of {}".format(datetime.datetime.today(), line))
                        attribute = str(line.split(",")[-1])
                        if "no read permission" in attribute:
                            print("{} - File {} has been locked for another process in Windows App Server. Try again later.".format(datetime.datetime.today(), file_name))
                        else:
                            print("{} - Start transfering file {} to bucket S3 {}".format(datetime.datetime.today(), file_name, bucketB))
                            try:
                                s3_client.upload_file(file_name, bucketB, object_name)
                                print("{} - Uploaded {} to s3://{}/{}".format(datetime.datetime.today(), file_name, bucketB, object_name))
                                dest_file_path = backup_folder + f
                                print("{} - Moving {} to {}".format(datetime.datetime.today(), file_name, dest_file_path))
                                os.replace(file_name, dest_file_path)
                            except botocore.exceptions.ClientError as error:
                                raise error
                            except botocore.exceptions.ParamValidationError as error:
                                raise ValueError('The parameters you provided are incorrect: {}'.format(error))
                except FileNotFoundError as file_not_found:
                    print("{} - {}".format(datetime.datetime.today(), file_not_found))
                    print("{} - File {} not found.".format(datetime.datetime.today(), output))
                except PermissionError as permission:
                    print("{} - {}".format(datetime.datetime.today(), permission))
             else:
                 print("{} - {} is not a TXT file...skipping it.".format(datetime.datetime.today(), f))
    else:
        print("{} - Directory {} not found.".format(datetime.datetime.today(), os.path.join(mount_point) + base_dir))
        fsx(shared_folder, mount_point, mount_options)

def main():

    # define your authentication properties
    ENV_FILE = os.environ.get("ENV_FILE", "/opt/rundeck/squad/payroll-loan/.env")
    config = Config(RepositoryEnv(ENV_FILE))
    ACCESS_KEY = config('AWS_ACCESS_KEY_ID')
    SECRET_KEY = config('AWS_SECRET_ACCESS_KEY')
    SESSION_TOKEN = config('AWS_SESSION_TOKEN')
    session = boto3.Session(
        aws_access_key_id=ACCESS_KEY,
        aws_secret_access_key=SECRET_KEY,
        aws_session_token=SESSION_TOKEN
    )
    s3_client = session.client('s3')

    # define your app properties
    shared_folder = config('ENDPOINT')
    mount_point = '/mnt/payroll-loan/files'
    mount_options = config('OPTIONS')
    base_dir = '/PLATFORM/BILLING/FILES/PARTNER'
    bucket = 'test-bucket-payroll-loan-A'
    bucket_folder = 'invoice/files/'
    bucketB = 'test-bucket-payroll-loan-B'
    bucket_folder_partnerB = 'out/invoice/files/'
    backup_folder = mount_point + '/PLATFORM/BILLING/BACKUP/'
    output = '/opt/rundeck/squad/payroll-loan/output.txt'

    # call your main functions here
    check_err(shared_folder, mount_point, mount_options, base_dir)
    send(shared_folder, mount_point, mount_options, base_dir, bucket, bucket_folder, backup_folder, s3_client, output)
    send_partnerB(shared_folder, mount_point, mount_options, base_dir, bucketB, bucket_folder_partnerB, backup_folder, s3_client, output)

if __name__ == '__main__':
    main()